/**
 * Definition for binary tree
 * class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode(int x) {
 *      val = x;
 *      left=null;
 *      right=null;
 *     }
 * }
 */
public class Solution {
    public TreeNode buildTree(ArrayList<Integer> in, ArrayList<Integer> po) {
        int n=in.size();
        if(n==0){
            TreeNode ans=null;
            return ans;
        }
        if(n==1){
            TreeNode ans=new TreeNode(in.get(0));
            return ans;
        }
        int x=po.get(n-1);
        TreeNode root=new TreeNode(x);
        ArrayList<Integer> in1=new ArrayList<>();
        ArrayList<Integer> in2=new ArrayList<>();
        
        int i=0;
        while(in.get(i)!=x){
            in1.add(in.get(i));
            i++;
        }
        int k=i;
        i++;
        while(i<n){
            in2.add(in.get(i));
            i++;
        }
        
        HashMap<Integer,Integer> hm=new HashMap<>();
        for(int j=0;j<n;j++)
            hm.put(in.get(j),j);
        
        ArrayList<Integer> po1=new ArrayList<>();
        ArrayList<Integer> po2=new ArrayList<>();
        
        
        for(int j=0;j<n-1;j++){
            int y=hm.get(po.get(j));
            if(y<k) po1.add(po.get(j));
            else po2.add(po.get(j));
        }
        
        root.left=buildTree(in1, po1);
        root.right=buildTree(in2,po2);
        return root;
    }
}
