/**
 * Definition for binary tree
 * class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode(int x) {
 *      val = x;
 *      left=null;
 *      right=null;
 *     }
 * }
 */
public class Solution {
    public ArrayList<Integer> postorderTraversal(TreeNode a) {
        ArrayList<Integer> ans=new ArrayList<Integer>();
        if(a==null) return ans;
        
        Stack<TreeNode> st=new Stack<>();
        TreeNode curr=a;
        st.push(a);
        TreeNode prev=null; 
        
        
        while(!st.isEmpty()){
            curr=st.peek();
            
            if(prev==null || prev.left==curr || prev.right==curr){
                if(curr.left!=null) st.push(curr.left);
                else if(curr.right!=null) st.push(curr.right);
                else{ 
                    st.pop();
                    ans.add(curr.val);
                }
            }
            else if( curr.left==prev){
                if(curr.right!=null) st.push(curr.right);
                else{ 
                    st.pop();
                    ans.add(curr.val);
                }
            }
            else if( curr.right==prev){
                st.pop();
                ans.add(curr.val);
            }
            prev=curr;
        }
        
        return ans;
    }
}
