public class Solution {
    
    public boolean check(String s){
        int n=s.length();
        for(int i=0;i<n/2;i++)
            if(s.charAt(i)!=s.charAt(n-i-1)) return false;
        return true;
    }
    
    // public int solve(String s, int i, String curr, int cut, int[] dp){
    //     int n=s.length();
    //     if(i==n){
    //         if(check(curr)) return cut;
    //         return Integer.MAX_VALUE/2;
    //     }
    //     if(dp[i]!=-1 && dp[i]!=Integer.MAX_VALUE/2) return dp[i];
        
    //     curr+=s.charAt(i);
    //     int ans=solve(s,i+1,curr,cut,dp);
    //     if(check(curr)){
    //         int x=solve(s,i+1,"",cut+1,dp);
    //         ans=Math.min(ans,x);
    //     }
        
    //     dp[i]=ans;
    //     return ans;
    // }
    
    public int solve(String s, int i, int j, int[][] dp){
        if(i==j|| check(s.substring(i,j+1))) return 0;
        if(dp[i][j]!=-1) return dp[i][j];
        
        int min=Integer.MAX_VALUE;
        for(int k=i;k<j;k++){
            int x=1+solve(s,i,k,dp)+solve(s,k+1,j,dp);
            min=Math.min(min,x);
        }
        dp[i][j]=min;
        return min;
    }
    
    public int minCut(String s) {
        int n=s.length();
        //int[] dp=new int[n+1];
        //Arrays.fill(dp,-1);
        //int ans=solve(s,0,"",0, dp);
        int[][] dp=new int[n][n];
        for(int i=0;i<n;i++)
            Arrays.fill(dp[i],-1);
        int ans=solve(s,0,n-1,dp);
        return ans;
    }
}
