public class Solution {
    // DO NOT MODIFY THE ARGUMENTS WITH "final" PREFIX. IT IS READ ONLY
   // public int max=Integer.MIN_VALUE;
    
    // public int solve(final int[] a, int in, int b, int[][] dp){
    //     int n=a.length;
    //     if(in==n||b==0) return 0;
    //     if(dp[in][b-1]!=-1) return dp[in][b-1];
        
    //     int x=solve(a,in+1,b,dp);
    //     int y=0;
    //     if(b%2==0) y=solve(a,in+1,b-1,dp)-a[in];
    //     else y=solve(a,in+1,b-1,dp)+a[in];
    //     dp[in][b-1]= Math.max(x,y);
    //     return dp[in][b-1];
    // }
    
    public int maxProfit(final int[] prices) {
        //sol1
        //int n=a.length;
        
        // int[][] dp=new int[n][4];
        // for(int i=0;i<n;i++)
        //     Arrays.fill(dp[i],-1);
            
        // int max=solve(a,0,4,dp);
        
        // // for(int i=0;i<n;i++){
        // //     for(int j=0;j<5;j++)
        // //         System.out.print(dp[i][j]+" ");
        // //     System.out.println();
        // // }
        // if(max<0) return 0;
        // return max;
        
        
        //Sec sol-
        /*
        if (prices == null || prices.length < 2) return 0;
 
        int[] left = new int[prices.length];
        int[] right = new int[prices.length];

        left[0] = 0; 
        int min = prices[0];
        for (int i = 1; i < prices.length; i++) {
            min = Math.min(min, prices[i]);
            left[i] = Math.max(left[i - 1], prices[i] - min);
        }
     
        right[prices.length - 1] = 0;
        int max = prices[prices.length - 1];
        for (int i = prices.length - 2; i >= 0; i--) {
            max = Math.max(max, prices[i]);
            right[i] = Math.max(right[i + 1], max - prices[i]);
        }
     
        int profit = 0;
        for (int i = 0; i < prices.length; i++) {
            profit = Math.max(profit, left[i] + right[i]);
        }
     
        return profit;
        */
        
        //Best sol-
        
        if(prices.length<2) return 0;
        
        int fb=Integer.MIN_VALUE,fs=0;
        int sb=Integer.MIN_VALUE,ss=0;
        
        for(int curr: prices){
            fb=Math.max(fb,-curr);
            fs=Math.max(fs,fb+curr);
            sb=Math.max(sb,fs-curr);
            ss=Math.max(ss,sb+curr);
        }
        return ss;
    }
}
