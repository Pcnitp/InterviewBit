public class Solution {
    // DO NOT MODIFY THE LIST. IT IS READ ONLY
    
    // public boolean solve(final String s, final String r, int x, int y,String curr, boolean[][] dp){
    //     //System.out.println(x+" "+y);
    //     int n=s.length();
    //     int m=r.length();
        
    //     if(y==m){
    //         if(curr.equals(s)) return true;
    //         return false;
    //     }
        
    //     if(dp[x][y]) return true;
    //     boolean count=false;
        
    //     if(x==n){
    //         while(y+1<m && r.charAt(y+1)=='*')
    //             y+=2;
    //         if(y==m){
    //             if(curr.equals(s)) count=true;
    //             else count= false;
    //         }
    //         dp[x][y]=count;
    //         return count;
    //     }
        
    //     if(y+1<m && r.charAt(y+1)=='*'){
    //         if(s.charAt(x)==r.charAt(y)|| r.charAt(y)=='.')
    //             count=solve(s,r,x+1,y,curr+s.charAt(x),dp)||solve(s,r,x,y+2,curr,dp);
    //         else count=solve(s,r,x,y+2,curr,dp);
    //     }
    //     else{
    //         if(s.charAt(x)==r.charAt(y) || r.charAt(y)=='.')
    //             count=solve(s,r,x+1,y+1,curr+s.charAt(x),dp);
    //     }
        
    //     dp[x][y]=count;
    //     return count;
    // }
    
    public int isMatch(final String s, final String r) {
        // int n=s.length();
        // int m=r.length();
        
        // boolean[][] dp=new boolean[n+1][m+1];
        
        // //boolean ans=solve(s,r,0,0,"",dp);
        // dp[0][0]=true;
        // for(int i=2;i<=m;i++)
        //     if(r.charAt(i-1)=='*')
        //         dp[0][i]=dp[0][i-2];
        
        // for(int i=1;i<=n;i++){
        //     for(int j=1;j<=m;j++){
        //         if(s.charAt(i-1)==r.charAt(j-1) || r.charAt(j-1)=='.')
        //             dp[i][j]=dp[i-1][j-1];
        //         else if(r.charAt(j-1)=='*'){
        //             dp[i][j]=dp[i][j-2];
        //             if(s.charAt(i-1)==r.charAt(j-2) || r.charAt(j-2)=='.')
        //                 dp[i][j]=dp[i][j-1] | dp[i-1][j];
        //         }
        //         else dp[i][j]=false;
        //     }
        // }
        
        // if(dp[n][m]) return 1;
        // return 0;
        
        int[][] array = new int[s.length()+1][r.length()+1];
        for(int i=0;i<=s.length();i++){
            array[i][0] = 0;
        }
        for(int i=0;i<=r.length();i++){
            array[0][i] = 0;
        }
        array[0][0] = 1;
        for(int i=1;i<=r.length();i++){
            if(r.charAt(i-1) == '*'){
                array[0][i] = array[0][i-2];
            }
        }
        for(int i=1;i<=s.length();i++){
            for(int j=1;j<=r.length();j++){
                if((s.charAt(i-1) == r.charAt(j-1)) || (r.charAt(j-1) == '.')){
                    array[i][j] = array[i-1][j-1];
                }
                else if(r.charAt(j-1) == '*'){
                    array[i][j] = array[i][j-2];
                    if((s.charAt(i-1) == r.charAt(j-2)) || (r.charAt(j-2) == '.')){
                        array[i][j] = array[i][j] | array[i-1][j];
                    }
                }
                else{
                    array[i][j] = 0;
                }
            }
        }
        return array[s.length()][r.length()];
    }
}
