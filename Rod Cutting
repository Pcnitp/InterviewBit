public class Solution {
    int min=Integer.MAX_VALUE;
    
    public class Pair{
        long cost;
        ArrayList<Integer> ar;
        Pair(long x, ArrayList<Integer> y){
            cost=x;
            ar=y;
        }
    }
    
    public Pair solve(int[] a, int s, int e, Pair[][] dp){
        if(s==e) return new Pair(0,new ArrayList<Integer>());
        if(s==e-1) return new Pair(0,new ArrayList<Integer>());
        if(dp[s][e].cost!=-1) return dp[s][e];
        
        int n=a.length;
        long min=Long.MAX_VALUE;
        ArrayList<Integer> ans=new ArrayList<Integer>();
        
        for(int i=s+1;i<e;i++){
            Pair p1=solve(a,s,i,dp);
            Pair p2=solve(a,i,e,dp);
            long cost=p1.cost+p2.cost;
            
            if(cost<min){
                ans=new ArrayList<Integer>();
                min=cost;
                ans.add(a[i]);
                for(int y:p1.ar) ans.add(y);
                for(int y:p2.ar) ans.add(y);
            }
        }
        
        if(min==Integer.MAX_VALUE) min=0;
        dp[s][e]=new Pair(min+a[e]-a[s],ans);
        
        return dp[s][e];
    }
    
    public int[] rodCut(int len, int[] b) {
        int n=b.length;
        int[] a=new int[n+2];
        a[0]=0;
        for(int i=0;i<n;i++)
            a[i+1]=b[i];
        a[n+1]=len;
        
        n=n+2;
        Pair[][] dp=new Pair[n+2][n+2];
        for(int i=0;i<n;i++)
            for(int j=0;j<n;j++)
                dp[i][j]=new Pair(-1,new ArrayList<Integer>());
        
        
        Pair p=solve(a,0,n-1,dp);
        ArrayList<Integer> ar=p.ar;
        // for(int x:ar)
        //     System.out.print(x+" ");
        //System.out.println(p.cost);
        int[] ans=new int[n-2];
        for(int i=0;i<n-2;i++)
            ans[i]=ar.get(i);
        return ans;
    }
}
