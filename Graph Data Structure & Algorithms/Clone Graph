/**
 * Definition for undirected graph.
 * class UndirectedGraphNode {
 *     int label;
 *     List<UndirectedGraphNode> neighbors;
 *     UndirectedGraphNode(int x) { label = x; neighbors = new ArrayList<UndirectedGraphNode>(); }
 * };
 */
public class Solution {
    
    public UndirectedGraphNode dfs(UndirectedGraphNode root,HashMap<UndirectedGraphNode,UndirectedGraphNode> hm){
        if(root==null) return root;
        if(hm.containsKey(root)) return hm.get(root);
        
        UndirectedGraphNode a=new UndirectedGraphNode(root.label);
        hm.put(root,a);
        
        for(UndirectedGraphNode b:root.neighbors)
            a.neighbors.add(dfs(b,hm));
        
        return a;
    }
    public UndirectedGraphNode cloneGraph(UndirectedGraphNode node) {
        HashMap<UndirectedGraphNode,UndirectedGraphNode> hm=new HashMap<>();
        return dfs(node,hm);
    }
}
